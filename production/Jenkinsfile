pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('SonarCloudToken')  // Store your token securely in Jenkins credentials
        SONAR_PROJECT_KEY = "abdulp07-git_multiRegionAks"
        SONAR_ORG = "abdulp07-git"
        SONAR_HOST_URL = "https://sonarcloud.io"
        AZURE_SECRET = credentials('azure_principal_secret')
        AZURE_SUBSCRIPTION = credentials('azure_subscribtion')
        AZURE_TENANT = credentials('azure_tenant')
        AZURE_USER = credentials('azure_user')
        SSH_PRIVATE_KEY = credentials('my_ssh_key')
        REMOTE_USER = "azureuser"
        
        
        
        
    }

    stages {
        
        

        stage('Checkout Code') {
            steps {
                git "https://github.com/abdulp07-git/multiRegionAks.git"
            }
        }
        
        
        
        stage('Terraform build') {
            steps {
                script {
                    try {
                        // Authenticate with Azure
                        sh """
                        set -e
                        az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT
                        az account set --subscription $AZURE_SUBSCRIPTION
                        """

                        // Run Terraform commands
                        sh "terraform -chdir=production/terraform init -reconfigure"
                        sh "terraform -chdir=production/terraform plan -var-file=production.tfvars -out=tfplan"
                        sh "terraform -chdir=production/terraform apply -auto-approve tfplan"

                        // Extract VM Public IP and assign it to REMOTE_HOST
                        def vmIp = sh(
                            script: "terraform -chdir=production/terraform/ output -raw bastio-ip",
                            returnStdout: true
                        ).trim()

                        def acr = sh(
                            script: "terraform -chdir=production/terraform/ output -raw acr-name",
                            returnStdout: true
                        ).trim()

                        // Set the environment variable
                        env.REMOTE_HOST = vmIp
                        env.REGISTRY = acr
                        
                        echo "Assigned VM Public IP to REMOTE_HOST: ${env.REMOTE_HOST}"
                        echo "ACR Registry name is : ${env.REGISTRY}"

                    } catch (Exception e) {
                        echo "Terraform execution failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        


        
        
        

        stage('Maven Test') {
            steps {
                sh 'mvn -f production/applications/maven/pom.xml test'
            }
        }
         


        
        stage('SonarCloud Scan') {
            steps {
                    sh '''
                        mvn -f production/applications/maven/pom.xml sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.organization=${SONAR_ORG} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            
        }

       

        
        stage('Build Artifact'){
            steps{
                sh 'mvn -f production/applications/maven/pom.xml clean package'
                
            }
        }
        
        
        stage("Docker image"){
            steps {
                script {
                    def dockerImage = "${REGISTRY}.azurecr.io/maven"
                    def tag = "v${BUILD_NUMBER}"
                    def fullImageName = "${dockerImage}:${tag}"
                    sh "docker build -t ${fullImageName} -f production/applications/maven/Dockerfile production/applications/maven/"
                }
            }
        }
        
        stage("Push image to ACR") {
            steps {
                script {
                    
                    def dockerImage = "${REGISTRY}.azurecr.io/maven"
                    def tag = "v${BUILD_NUMBER}"
                    def fullImageName = "${dockerImage}:${tag}"
                    
                    // Authenticate to Azure
            sh """
                az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT
                az account set --subscription $AZURE_SUBSCRIPTION
            """
                    // Login to ACR
            sh "az acr login --name ${REGISTRY}"
            
                   // Push the image to ACR
            sh "docker push ${fullImageName}"
            
                    // Logout from Azure
            sh "az logout"
            
                    
                }
            }
        }
        

        stage ("Modify Configurations"){
            steps {
                script {
                    sh """
                    sed -i 's/^[[:space:]]*tag: .*/  tag: v'${BUILD_NUMBER}'/' production/kubernetes/helm-charts/maven/values.yaml
                    sed -i 's/^version: .*/version: v${BUILD_NUMBER}/' production/kubernetes/helm-charts/maven/Chart.yaml
                    sed -i 's/^    targetRevision: v.*/    targetRevision: v'${BUILD_NUMBER}'/' production/kubernetes/maven/india-application.yaml
                    sed -i 's/^    targetRevision: v.*/    targetRevision: v'${BUILD_NUMBER}'/' production/kubernetes/maven/uk-application.yaml
                    sed -i 's/^    targetRevision: v.*/    targetRevision: v'${BUILD_NUMBER}'/' production/kubernetes/maven/us-application.yaml
                    """
                }
            }
        }

        stage ("Push helm chat to ACR"){
            steps {
                script {
                    sh """
                    helm package production/kubernetes/helm-charts/maven -d production/kubernetes/helm-charts/
                    helm push production/kubernetes/helm-charts/maven-v${BUILD_NUMBER}.tgz oci://${REGISTRY}.azurecr.io/helm
                    """
                }
            }
        }
        
        
        stage ("Sync configs"){
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    rsync -avz -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" production/kubernetes $REMOTE_USER@$REMOTE_HOST:.
                    """
                    }
                
            }
        }  



        stage ("Deployment") {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'my_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
ssh -i $SSH_KEY -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
echo "Running commands on remote VM"

# login using service principal
az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT

#Get AKS cluster credentials
az aks get-credentials --resource-group pro-eastus --name maks-pro-eastus --overwrite-existing --admin
az aks get-credentials --resource-group pro-ukwest --name maks-pro-ukwest --overwrite-existing --admin
az aks get-credentials --resource-group pro-centralindia --name maks-pro-centralindia --overwrite-existing --admin


           # SWITCH TO CENTRAL INDIA CLUSTER

kubectl config use-context maks-pro-centralindia-admin

#install nginx-ingress controller in central india
kubectl get ns ingress-nginx || kubectl apply -f kubernetes/ingress/india-ingress.yaml

#install argocd
bash kubernetes/scripts/argocd.sh

#install argo-rollout
if ! helm list -n argo-rollouts | grep -q 'argo-rollouts'; then   helm install argo-rollouts argo/argo-rollouts -n argo-rollouts --create-namespace; else   echo "Argo Rollouts is already installed via Helm."; fi

#restart argocd-service
sudo systemctl restart argocd.service

#install helm repo for prometheus
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

#install prometheus and grafana

if ! helm list -n monitoring | grep -q 'prometheus'; then
  helm install prometheus prometheus-community/kube-prometheus-stack \
    --namespace monitoring \
    --create-namespace \
    --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
else
  echo "Prometheus is already installed via Helm."
fi

#restart grafana and promethus
sudo systemctl restart prometheus
sudo systemctl restart grafana


           # SWITCH TO US CLUSTER

kubectl config use-context maks-pro-eastus-admin

#install nginx-ingress controller in us
kubectl get ns ingress-nginx || kubectl apply -f kubernetes/ingress/us-ingress.yaml


#install argo-rollout
if ! helm list -n argo-rollouts | grep -q 'argo-rollouts'; then   helm install argo-rollouts argo/argo-rollouts -n argo-rollouts --create-namespace; else   echo "Argo Rollouts is already installed via Helm."; fi

#install prometheus node exporter
if ! helm list -n monitoring | grep -q 'prometheus-remote'; then
  helm install prometheus-remote prometheus-community/kube-prometheus-stack \
    --namespace monitoring \
    --create-namespace \
    --set prometheus.enabled=false \
    --set grafana.enabled=false \
    --set alertmanager.enabled=false \
    --values kubernetes/prometheus/values.yaml
else
  echo "Prometheus Remote is already installed via Helm."
fi

#install serviceMonitor
kubectl apply -f kubernetes/prometheus/prometheus-servicemonitor.yaml


              # SWITCH TO UK CLUSTER

kubectl config use-context maks-pro-ukwest-admin

#install nginx-ingress controller in us
kubectl get ns ingress-nginx || kubectl apply -f kubernetes/ingress/uk-ingress.yaml


#install argo-rollout
if ! helm list -n argo-rollouts | grep -q 'argo-rollouts'; then   helm install argo-rollouts argo/argo-rollouts -n argo-rollouts --create-namespace; else   echo "Argo Rollouts is already installed via Helm."; fi

#install prometheus node exporter
if ! helm list -n monitoring | grep -q 'prometheus-remote'; then
  helm install prometheus-remote prometheus-community/kube-prometheus-stack \
    --namespace monitoring \
    --create-namespace \
    --set prometheus.enabled=false \
    --set grafana.enabled=false \
    --set alertmanager.enabled=false \
    --values kubernetes/prometheus/values.yaml
else
  echo "Prometheus Remote is already installed via Helm."
fi

#install serviceMonitor
kubectl apply -f kubernetes/prometheus/prometheus-servicemonitor.yaml


               # SWITCH TO INDIA CLUSTER

kubectl config use-context maks-pro-centralindia-admin


helm upgrade prometheus prometheus-community/kube-prometheus-stack \
    --namespace monitoring \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[0].job_name="maks-rg-eastus-9100" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[0].static_configs[0].targets[0]="10.0.0.65:9100" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[1].job_name="maks-rg-eastus-8080" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[1].static_configs[0].targets[0]="10.0.0.64:8080" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[2].job_name="maks-rg-ukwest-9100" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[2].static_configs[0].targets[0]="10.1.0.65:9100" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[3].job_name="maks-rg-ukwest-8080" \
    --set prometheus.prometheusSpec.additionalScrapeConfigs[3].static_configs[0].targets[0]="10.1.0.64:8080"

#Deploy the application

                                                                                                                                                    
EOF
"""
                    }
                }
            }




    } //Stages end here.
} //pipeline end here
