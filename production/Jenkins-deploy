pipeline {
    agent any 



    environment {
        
        AZURE_SECRET = credentials('azure_principal_secret')
        AZURE_SUBSCRIPTION = credentials('azure_subscribtion')
        AZURE_TENANT = credentials('azure_tenant')
        AZURE_USER = credentials('azure_user')
        SSH_PRIVATE_KEY = credentials('my_ssh_key')
        REMOTE_USER = "azureuser"
        REMOTE_HOST = "4.213.68.1"
       
    }


    stages {
            stage ("Deployment using gateway server") {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'my_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
ssh -i $SSH_KEY -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
echo "Running commands on remote VM"

az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT
az aks get-credentials --resource-group bw89rg --name bwaks --overwrite-existing

#install nginx ingress controller
kubectl apply -f aks-files/ingress/install-nginx-ingress.yml

# Create namespace only if it doesn't exist
kubectl get namespace staging || kubectl create namespace staging

# Apply deployment files
kubectl apply -f aks-files/maven-app/maven.yml -n staging

#install prometheus grafana
helm install kube-prometheus-stack aks-files/helm-charts/kube-prometheus-stack -n staging

sleep 30

#create ingress for domains
kubectl apply -f aks-files/ingress/intodepth.com-ingress.yml

                                                                                                                                                    
EOF
"""
                    }
                }
            }
        }

}
